class Cell:
    def __init__(self, is_alive=False):
        self.is_alive = is_alive

    def __str__(self):
        return "█" if self.is_alive else " "   # visual representation
class Grid:
    def __init__(self, rows, cols, initial_state=None):
        self.rows = rows
        self.cols = cols
        self.grid = [[Cell() for _ in range(cols)] for _ in range(rows)]

        # If an initial state is given, apply it
        if initial_state:
            for r, c in initial_state:
                self.grid[r][c].is_alive = True

    def display(self):
        for row in self.grid:
            print("".join(str(cell) for cell in row))
        print("\n" + "-"*self.cols)

    def count_neighbors(self, row, col):
        directions = [(-1, -1), (-1, 0), (-1, 1),
                      (0, -1),          (0, 1),
                      (1, -1), (1, 0), (1, 1)]
        count = 0
        for dr, dc in directions:
            r, c = row + dr, col + dc
            if 0 <= r < self.rows and 0 <= c < self.cols:
                if self.grid[r][c].is_alive:
                    count += 1
        return count

    def next_generation(self):
        new_grid = [[Cell() for _ in range(self.cols)] for _ in range(self.rows)]

        for r in range(self.rows):
            for c in range(self.cols):
                alive_neighbors = self.count_neighbors(r, c)
                if self.grid[r][c].is_alive:
                    if alive_neighbors in (2, 3):
                        new_grid[r][c].is_alive = True
                else:
                    if alive_neighbors == 3:
                        new_grid[r][c].is_alive = True
        self.grid = new_grid
import time
import os

class GameOfLife:
    def __init__(self, rows, cols, initial_state=None):
        self.rows = rows
        self.cols = cols
        # Initialize grid
        self.grid = [[0 for _ in range(cols)] for _ in range(rows)]
        
        if initial_state:
            for r, c in initial_state:
                self.grid[r][c] = 1

    def display(self):
        os.system('cls' if os.name == 'nt' else 'clear')
        for row in self.grid:
            print(" ".join(["█" if cell else "." for cell in row]))
        print("\n")

    def get_neighbours(self, row, col):
        directions = [(-1, -1), (-1, 0), (-1, 1),
                      (0, -1),          (0, 1),
                      (1, -1), (1, 0), (1, 1)]
        
        count = 0
        for dr, dc in directions:
            r, c = row + dr, col + dc
            if 0 <= r < self.rows and 0 <= c < self.cols:
                count += self.grid[r][c]
        return count

    def step(self):
        new_grid = [[0 for _ in range(self.cols)] for _ in range(self.rows)]
        
        for r in range(self.rows):
            for c in range(self.cols):
                neighbours = self.get_neighbours(r, c)
                if self.grid[r][c] == 1:
                    if neighbours == 2 or neighbours == 3:
                        new_grid[r][c] = 1  # Survives
                else:
                    if neighbours == 3:
                        new_grid[r][c] = 1  # Becomes alive
        self.grid = new_grid

    def run(self, generations=10, delay=0.5):
        for _ in range(generations):
            self.display()
            self.step()
            time.sleep(delay)


# Example initial states
# Glider pattern
glider = [(1, 2), (2, 3), (3, 1), (3, 2), (3, 3)]

# Block (still life)
block = [(1, 1), (1, 2), (2, 1), (2, 2)]

# Blinker (oscillator)
blinker = [(2, 1), (2, 2), (2, 3)]

# Run the game
game = GameOfLife(10, 10, glider)
game.run(generations=20, delay=0.3)
